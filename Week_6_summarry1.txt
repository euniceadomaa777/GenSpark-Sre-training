USING kUBERNETES FOR MONITORING AND CONFIGURING LIVENESS, READINESS & READINESS PROBES

cat <<EOF > nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
EOF

2.    Create the deployment:
kubectl apply -f nginx-deployment.yaml


3. Verify that your pods are running and have their own internal IP addresses:
kubectl get pods -l 'app=nginx' -o wide | awk {'print $1" " $3 " " $6'} | column -t 


4. To expose a deployment of ClusterIP type, I used the this command
kubectl expose deployment nginx-deployment  --type=ClusterIP  --name=nginx-service-cluster-ip


5. Access the application and get the ClusterIP number:. 
kubectl get service ngix-service-cluster-ip

Kubernetes liveness probes helps many applications runned for a long time from being broken and unrecovearable
apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-exec
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/busybox
    args:
    - /bin/sh
    - -c
    - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5
	  
	  
	  
To perform a probe, the kubelet executes the command cat /tmp/healthy in the target container;
If the command succeeds, it returns 0, and the kubelet considers the container to be alive and healthy. If the command returns a non-zero value, the kubelet kills the container and restarts it.

6. When the Container starts it execute the following command.
/bin/sh -c "touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600"

